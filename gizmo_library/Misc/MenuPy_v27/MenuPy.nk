Group {
 inputs 0
 name MenuPy
 onCreate "\nthisGRP = nuke.thisGroup()\nthisGRP\['toolVer'].setValue( \"<font size=6><b>MenuPy \{0\}</b></font>\".format( thisGRP\['l_VERSION'].value() ) )\ngoStore = nuke.toNode('store')\ngoStore\['fn'].execute()\ngoStore\['core'].execute()\ntry :\n    import mpyCore\n    mpyCoreFile = nuke.re.split(r'/|\\\\' , nuke.os.environ\['HOME']) + \['.nuke','mpyCore.py']\n    fileWrite( pathSeparator().join(mpyCoreFile) , goStore\['core'].value() )\nexcept :\n    thisGRP\['mod_path'].fromScript('\{\}')\n    thisGRP\['mod_default'].fromScript('\{\}')\nMenuPyUIPath( thisGRP )\nMenuPyUIDefault( thisGRP )\n"
 tile_color 0xff9900ff
 selected true
 xpos -77
 ypos -236
 addUserKnob {20 tab_general l General}
 addUserKnob {26 toolVer l "" +STARTLINE T "<font size=6><b>MenuPy 2.7</b></font>"}
 addUserKnob {26 title_init l "<b><font color=orange>quick setup</font></b>"}
 addUserKnob {1 customPath l "custom path"}
 addUserKnob {22 selectFolder l "select folder" t "select a folder for nuke plugin" -STARTLINE T "try :\n\tthisGRP = nuke.thisGroup()\n\tfolderPath = nuke.getFilename('select folder', '*/')\n\tif nuke.os.path.isdir(folderPath) :\n\t\tthisGRP\['customPath'].setValue( folderPath )\n\telse :\n\t\tthisGRP\['customPath'].setValue( nuke.os.sep.join(folderPath.split(nuke.os.sep)\[:-1]) )\nexcept :\n\tpass"}
 addUserKnob {22 add_path l "\[ add path / reload menu ]" t "Add the path to nuke plugin. It will scan though the folder including sub-folder for *.gizmo , *.nk *.py and icon files. After added the path, user can add any tools into that folder without any extra work next time.\n\n* Icon file is optional. The icon file should named same as the tools file.\ne.g.\ntool file : MenuPy.nk\nicon file : MenuPy.png\n\nThe menu will be added immediately, no restart nuke required." T "import sys\n\nthisGRP = nuke.thisGroup()\nnkfolder = nuke.re.split(r'/|\\\\' , nuke.os.environ\['HOME']) + \[ '.nuke' ]\n\ngoStore = nuke.toNode('store')\ngoStore\['fn'].execute()\ngoStore\['initTemplate'].execute()\ngoStore\['core'].execute()\n\n##########\n\nif sys.platform\[:5] == 'linux' or sys.platform == 'darwin' :\n\tusrInput = \[''] + newUsrPath( thisGRP )\nelse :\n\tusrInput = newUsrPath( thisGRP )\n\npathSep = pathSeparator()\n\n##########\n\nif len(usrInput) :\n\tif nuke.os.path.exists( pathSep.join(usrInput) ) :\n\t\t### get or create init.py file\n\t\tinitContext = fileRead( pathSep.join(nkfolder + \['init.py']) )\n\t\t### get or create menu.py file\n\t\tmenuContext = fileRead( pathSep.join(nkfolder + \['menu.py']) )\n\n\t\t### update mpyCore.py\n\t\tfileWrite( pathSep.join(nkfolder + \['mpyCore.py']) , \[ i+'\\n' for i in goStore\['core'].value().split('\\n') ] )\n\n\t\t### setup folder and setting file\n\t\tif not nuke.os.path.exists( pathSep.join(nkfolder + \['MenuPy']) ) :\n\t\t\tnuke.os.mkdir( pathSep.join(nkfolder + \['MenuPy'] ) )\n\t\t\tif not nuke.os.path.exists( pathSep.join(nkfolder + \['MenuPy','mpySetting']) ) :\n\t\t\t\tfile = open( pathSep.join(nkfolder + \['MenuPy','mpySetting']) , 'w' )\n\t\t\t\tfile.close()\n\t\t\tif not nuke.os.path.exists( pathSep.join(nkfolder + \['MenuPy','mpyDefault']) ) :\n\t\t\t\tfile = open( pathSep.join(nkfolder + \['MenuPy','mpyDefault']) , 'w' )\n\t\t\t\tfile.close()\n\n\n\t\tmpyInitStatus = fileCheck( initContext , 'init' )\n\t\tmpyMenuStatus = fileCheck( menuContext , 'menu' )\n\n\t\t### init has no MenuPy\n\t\tif not mpyInitStatus\['toolStatus']\[0] and not mpyInitStatus\['toolStatus']\[1] and not mpyInitStatus\['toolStatus']\[2] :\n\t\t\tif initContext\[-1:]\[-2:] != '\\n' :\n\t\t\t\tinitContext += \['\\n'] + createNewCode( usrInput , 'init' )\n\t\t\telse :\n\t\t\t\tinitContext += createNewCode( usrInput , 'init' )\n\t\t### menu has no MenuPy\n\t\tif not mpyMenuStatus\['toolStatus']\[0] and not mpyMenuStatus\['toolStatus']\[1] and not mpyMenuStatus\['toolStatus']\[2] :\n\t\t\tif menuContext\[-1:]\[-2:] != '\\n' :\n\t\t\t\tmenuContext += \['\\n'] + createNewCode( usrInput , 'menu' )\n\t\t\telse :\n\t\t\t\tmenuContext += createNewCode( usrInput , 'menu' )\n\n\n\n\t\t### init 2.0 already, just update path\n\t\tif mpyInitStatus\['toolStatus']\[0] and mpyInitStatus\['toolStatus']\[1] and mpyInitStatus\['toolStatus']\[2] :\n\t\t\tinitContext = updateNewCode( usrInput , mpyInitStatus , initContext , 'init' )\n\t\t### menu 2.0 already, just update path\n\t\tif mpyMenuStatus\['toolStatus']\[0] and mpyMenuStatus\['toolStatus']\[1] and mpyMenuStatus\['toolStatus']\[2] :\n\t\t\tmenuContext = updateNewCode( usrInput , mpyMenuStatus , menuContext , 'menu' )\n\n\n\n\t\t### init has broken tag\n\t\tif mpyInitStatus\['toolStatus']\[0] and not mpyInitStatus\['toolStatus']\[1] :\n\t\t\tif mpyInitStatus\['toolStatus']\[2] :\n\t\t\t\tinitContext = brokenDetect( initContext , 'no_closing' )\n\t\tif not mpyInitStatus\['toolStatus']\[0] and mpyInitStatus\['toolStatus']\[1] :\n\t\t\tif mpyInitStatus\['toolStatus']\[2] :\n\t\t\t\tinitContext = brokenDetect( initContext , 'no_opening' )\n\t\tif not mpyInitStatus\['toolStatus']\[0] and not mpyInitStatus\['toolStatus']\[1] :\n\t\t\tif mpyInitStatus\['toolStatus']\[2] :\n\t\t\t\tinitContext = brokenDetect( initContext , 'only_code' )\n\n\n\n\t\t##########\n\n\t\tfileWrite( pathSep.join(nkfolder + \['init.py']) , initContext )\n\t\tfileWrite( pathSep.join(nkfolder + \['menu.py']) , menuContext )\n\n\t\tMenuPyAddPath( pathSep.join( usrInput ) )\n\t\tMenuPyAutogen( pathSep.join( usrInput ) )\n\t\tMenuPyUIPath( thisGRP )\n\n\t\tmpyMSG(0)\n\telse :\n\t\tmpyMSG(16)\nelse :\n\tmpyMSG(12)" +STARTLINE}
 addUserKnob {22 remove_path l "\[ remove path from menu ]" t "Select remove path to remove from nuke plugin. \n\n* effect will apply immediately without restart nuke." -STARTLINE T "thisGRP = nuke.thisGroup()\nnkfolder = nuke.re.split(r'/|\\\\' , nuke.os.environ\['HOME']) + \[ '.nuke' ]\n\ngoStore = nuke.toNode('store')\ngoStore\['fn'].execute()\ngoStore\['core'].execute()\n\n##########\n\npathSep = pathSeparator()\n\ntry :\n\t### get or create mpySetting file\n\tsettingContext = fileRead( pathSep.join(nkfolder + \['MenuPy','mpySetting']) )\n\t### get or create init.py file\n\tinitContext = fileRead( pathSep.join(nkfolder + \['init.py']) )\n\t### get or create menu.py file\n\tmenuContext = fileRead( pathSep.join(nkfolder + \['menu.py']) )\n\n\tmpyLinked = MenuGetPath( _initContext=initContext , _menuContext=menuContext , _settingContext=settingContext )\n\n\t##########\n\n\tif len(mpyLinked) :\n\t\trmPanel = removePathPanel( mpyLinked.keys() )\n\n\t\tif rmPanel\[1] :\n\t\t\tconfirmLine = \{\n\t\t\t\t\t\t\t'init' : \[] , \n\t\t\t\t\t\t\t'menu' : \[] , \n\t\t\t\t\t\t\t'setting' : \[] , \n\t\t\t\t\t\t\t\}\n\n\t\t\tfor key,value in mpyLinked.items() :\n\t\t\t\tif rmPanel\[0].value(key) :\n\t\t\t\t\tfor lineNum in value\[0] :\n\t\t\t\t\t\tconfirmLine\['init'].append( lineNum )\n\t\t\t\t\tfor lineNum in value\[1] :\n\t\t\t\t\t\tconfirmLine\['menu'].append( lineNum )\n\t\t\t\t\tfor lineNum in value\[2] :\n\t\t\t\t\t\tconfirmLine\['setting'].append( lineNum )\n\n\t\t\tconfirmLine\['init'].sort()\n\t\t\tconfirmLine\['init'].reverse()\n\t\t\tconfirmLine\['menu'].sort()\n\t\t\tconfirmLine\['menu'].reverse()\n\t\t\tconfirmLine\['setting'].sort()\n\t\t\tconfirmLine\['setting'].reverse()\n\n\t\t\tfor i in confirmLine\['setting'] :\n\t\t\t\tmName = nuke.os.path.split(settingContext\[i].replace('\\n','').replace('\"','').split('|')\[0])\[1]\n\t\t\t\tmItem = settingContext\[i].replace('\\n','').split('|')\[5].split('.')\[0]\n\t\t\t\tnuke.menu(mItem).removeItem(mName)\n\n\t\t\tfor rmLine in confirmLine\['init'] :\n\t\t\t\tinitContext.pop( rmLine )\n\t\t\tfor rmLine in confirmLine\['menu'] :\n\t\t\t\tmenuContext.pop( rmLine )\n\t\t\tfor rmLine in confirmLine\['setting'] :\n\t\t\t\tsettingContext.pop( rmLine )\n\n\t\t\tfileWrite( pathSep.join(nkfolder + \['init.py']) , initContext )\n\t\t\tfileWrite( pathSep.join(nkfolder + \['menu.py']) , menuContext )\n\t\t\tfileWrite( pathSep.join(nkfolder + \['MenuPy','mpySetting']) , settingContext )\n\t\t\tMenuPyUIPath( thisGRP )\n\n\t\t\tmpyMSG(5)\n\telse :\n\t\tmpyMSG(13)\nexcept IOError :\n\tmpyMSG(8)"}
 addUserKnob {26 spacer l "" +STARTLINE T <br>}
 addUserKnob {26 title_tools l "<font color=orange><b>tools</b></font>"}
 addUserKnob {22 menu_setting l "change menu setting" t "Change the setting of the menu.\n\n- shortcut\n- shortcut context\n- re-assign menu\n\ncan be customize.\n\n* effect will apply immediately without restart nuke." T "nkfolder = nuke.re.split(r'/|\\\\' , nuke.os.environ\['HOME']) + \[ '.nuke' ]\n\ngoStore = nuke.toNode('store')\ngoStore\['fn'].execute()\ngoStore\['core'].execute()\n\n##########\n\ntry :\n\tpathSep = pathSeparator()\n\t\n\t### get or create mpySetting file\n\tsettingContext = \[ i.replace('\\n','') for i in fileRead( pathSep.join(nkfolder + \['MenuPy','mpySetting']) ) ]\n\thotkeysD = getHotkeys('reverse')\n\n\tif len( settingContext ) :\n\t\tsettingData = \{\}\n\t\tfor line in settingContext :\n\t\t\tsettingData\[ line.split('|')\[1]\[1:-1] ] = line.split('|')\n\n\t\titemMenu = \[]\n\t\tfor key in settingData.keys() :\n\t\t\titemMenu.append(key)\n\t\titemMenu.sort()\n\n\t\tloopCheck = \[ 0 , 0 ]\n\t\twhile loopCheck\[0] < 5 :\n\t\t\tdefaultS = \{\n\t\t\t\t'shortcut' : \[ 'none','ctrl+','ctrl+alt+','ctrl+shift+','ctrl+alt+shift+','alt+','alt+shift+','shift+' ] , \n\t\t\t\t'scKey' : '' , \n\t\t\t\t'shortcutContext' : \[ '\"0 : Window\"','\"1 : Application\"','\"2 : DAG\"' ] , \n\t\t\t\t'menu' : \[ 'Nuke','Nodes','Pane','Properties','Animation','Viewer','\"Node Graph\"','Axis.File','Axis.Snap' ]\n\t\t\t\t\}\n\n\t\t\tsPanel = selectItemPanel( itemMenu )\n\t\t\tif sPanel\[1] == 0 :\n\t\t\t\tloopCheck\[0] = 10\n\t\t\telse :\n\t\t\t\tdefaultS = getCurSetting( settingData\[sPanel\[0].value('select items : ')] , defaultS )\n\t\t\t\tePanel = editItemPanel( defaultS )\n\t\t\t\tif ePanel\[1] == 0 :\n\t\t\t\t\tloopCheck\[0] = 10\n\t\t\t\telif ePanel\[1] == 1 :\n\t\t\t\t\tnewData = assignModified( ePanel\[0] , sPanel\[0] , hotkeysD )\n\n\t\t\t\t\tif newData\[0] != 'no_change' :\n\t\t\t\t\t\tsettingData\[sPanel\[0].value('select items : ')]\[3] = newData\[0]\n\t\t\t\t\t\tif len(newData\[0].split('\\'')\[1]) :\n\t\t\t\t\t\t\thotkeysD\[newData\[0].split('\\'')\[1]] = sPanel\[0].value('select items : ').split('/')\[-1:]\[0]\n\t\t\t\t\t\telse :\n\t\t\t\t\t\t\tfor key,value in hotkeysD.items() :\n\t\t\t\t\t\t\t\tif value == sPanel\[0].value('select items : ').split('/')\[-1:]\[0] :\n\t\t\t\t\t\t\t\t\tdel hotkeysD\[key]\n\t\t\t\t\tsettingData\[sPanel\[0].value('select items : ')]\[4] = newData\[1]\n\t\t\t\t\tsettingData\[sPanel\[0].value('select items : ')]\[5] = newData\[2]\n\n\t\t\t\t\tsettingContext = \[ '|'.join(i)+'\\n' for i in settingData.values() ]\n\t\t\t\t\tfileWrite( pathSep.join(nkfolder + \['MenuPy','mpySetting']) , settingContext )\n\n\t\t\t\t\tloopCheck\[1] = 1\n\n\t\tif loopCheck\[1] :\n\t\t\tmenuRefresh()\n\t\t\tmpyMSG(6)\n\telse :\n\t\tmpyMSG(4)\nexcept IOError :\n\tmpyMSG(7)" +STARTLINE}
 addUserKnob {22 nodes_default l "set nodes default" t "Create node(s), put the setting of the node as the default setting, then save it. Next time when pull out that node, the value will be set as default.\n\nRemoved node(s) default setting. It will revert it back to it's default value.\n\n* this function support multi nodes selected.\n** effect will apply immediately without restart nuke." -STARTLINE T "thisGRP = nuke.thisGroup()\nnkfolder = nuke.re.split(r'/|\\\\' , nuke.os.environ\['HOME']) + \[ '.nuke' ]\n\ngoStore = nuke.toNode('store')\ngoStore\['fn'].execute()\ngoStore\['core'].execute()\n\n##########\n\npathSep = pathSeparator()\n\n### get or create menu.py file\nmenuContext = fileRead( pathSep.join(nkfolder + \['menu.py']) )\n### update mpyCore.py\nfileWrite( pathSep.join(nkfolder + \['mpyCore.py']) , \[ i+'\\n' for i in goStore\['core'].value().split('\\n') ] )\n\nmpyMenuStatus = fileCheck( menuContext , 'knobDefault' )\n\nif mpyMenuStatus\['existPath'] != \['commandExist'] :\n\t### menu has no MenuPy\n\tif not mpyMenuStatus\['toolStatus']\[0] and not mpyMenuStatus\['toolStatus']\[1] and not mpyMenuStatus\['toolStatus']\[2] :\n\t\tmenuContext += createNewDefault()\n\t\tfileWrite( pathSep.join(nkfolder + \['menu.py']) , menuContext )\n\t### menu 2.0 already, just update path\n\tif mpyMenuStatus\['toolStatus']\[0] and mpyMenuStatus\['toolStatus']\[1] and mpyMenuStatus\['toolStatus']\[2] :\n\t\tmenuContext = updateNewDefault( mpyMenuStatus , menuContext )\n\t\tfileWrite( pathSep.join(nkfolder + \['menu.py']) , menuContext )\n\n### missing folder\nif not nuke.os.path.exists( pathSep.join(nkfolder + \['MenuPy']) ) :\n\tnuke.os.mkdir( pathSep.join(nkfolder + \['MenuPy'] ) )\n\n##########\n\ndItems = newDefaultD( thisGRP )\n\n### panel\ncheck = 0\nwhile check < 5 :\n\tstatusItems = \{ 'add' : \[] , 'update' : \[] , 'remove' : \[] \}\n\tmPanel = defaultSettingMainPanel()\n\n\t### save button\n\tif mPanel == 1 :\n\t\twith getLevel() :\n\t\t\tif nuke.selectedNodes() :\n\n\t\t\t\t### get difference from nuke default\n\t\t\t\twith getLevel() :\n\t\t\t\t\trItems = getNonDefault()\n\n\t\t\t\tfor key,value in rItems.items() :\n\t\t\t\t\ttry :\n\t\t\t\t\t\tif dItems\[key] != value :\n\t\t\t\t\t\t\tstatusItems\['update'].append(key)\n\t\t\t\t\texcept KeyError :\n\t\t\t\t\t\tstatusItems\['add'].append(key)\n\n\t\t\t\t### update changes\n\t\t\t\tdItems.update( rItems )\n\n\t\t\t\t### get selectedNodes info\n\t\t\t\tselNodes = getSelNodesInfo( \['Group'] )\n\n\t\t\t\t### filter out those back to nuke default\n\t\t\t\tfor key,value in dItems.items() :\n\t\t\t\t\tif key.split('.')\[0] in selNodes.keys() :\n\t\t\t\t\t\tcnk = key.split('.')\n\t\t\t\t\t\tif selNodes\[ cnk\[0] ]\[ cnk\[1] ].toScript() != value :\n\t\t\t\t\t\t\tstatusItems\['remove'].append( key )\n\t\t\t\t\t\t\tdel dItems\[key]\n\n\t\t\t\tupdateMD( thisGRP , dItems )\n\n\t\t\t\t### log msg\n\t\t\t\tif len(statusItems\['add']) :\n\t\t\t\t\tmsg1 = '<br><br>add :<br>\{0\}'.format( '<br>'.join( \[ '<font color=orange>\{0\}</font>'.format(i) for i in statusItems\['add'] ] ) )\n\t\t\t\telse :\n\t\t\t\t\tmsg1 = ''\n\n\t\t\t\tif len(statusItems\['update']) :\n\t\t\t\t\tmsg2 = '<br><br>updated :<br>\{0\}'.format( '<br>'.join( \[ '<font color=orange>\{0\}</font>'.format(i) for i in statusItems\['update'] ] ) )\n\t\t\t\telse :\n\t\t\t\t\tmsg2 = ''\n\n\t\t\t\tif len(statusItems\['remove']) :\n\t\t\t\t\tmsg3 = '<br><br>removed :<br>\{0\}'.format( '<br>'.join( \[ '<font color=orange>\{0\}</font>'.format(i) for i in statusItems\['remove'] ] ) )\n\t\t\t\telse :\n\t\t\t\t\tmsg3 = ''\n\n\t\t\t\tif len(msg1) or len(msg2) or len(msg3) :\n\t\t\t\t\tmpyMSG(9 , msg1, msg2, msg3 )\n\t\t\t\telse :\n\t\t\t\t\tmpyMSG(11)\n\n\t\t\t\tcheck = 10\n\t\t\telse :\n\t\t\t\tmpyMSG(10)\n\n\t### remove button\n\tif mPanel == 2 :\n\t\tif len(dItems) :\n\t\t\tsavedClass = \[]\n\t\t\tfor i in dItems.keys() :\n\t\t\t\tif i.split('.')\[0] not in savedClass :\n\t\t\t\t\tsavedClass.append( i.split('.')\[0] )\n\t\t\tsavedClass.sort()\n\t\t\t\n\t\t\trPanel = resetNodesPanel( savedClass )\n\n\t\t\tif rPanel\[1] :\n\t\t\t\tremoveDKnobs = \[]\n\t\t\t\tfor checked in savedClass :\n\t\t\t\t\tif rPanel\[0].value(checked) :\n\t\t\t\t\t\tremoveDKnobs.append(checked)\n\t\t\t\t\n\t\t\t\tfor key,value in dItems.items() :\n\t\t\t\t\tif key.split('.')\[0] in removeDKnobs :\n\t\t\t\t\t\tif key.split('.')\[0] not in statusItems\['remove'] :\n\t\t\t\t\t\t\tstatusItems\['remove'].append(key.split('.')\[0])\n\t\t\t\t\t\tdel dItems\[key]\n\n\t\t\t\tupdateMD( thisGRP , dItems )\n\n\t\t\t\t### log msg\n\t\t\t\tmpyMSG(14, '<br>'.join(\['<font color=orange>\{0\}</font>'.format(i) for i in statusItems\['remove']]) )\n\t\telse :\n\t\t\tmpyMSG(15)\n\n\t\tcheck = 10\n\n\t### close button\n\tif mPanel == 0 :\n\t\tcheck = 10"}
 addUserKnob {22 about_thisNuke l "about this Nuke" t "Show every settings about this nuke in HTML format.\n- version\n- application installed location\n- plugin path\n- all hotkeys/shortcut" T "import sys, nukescripts\n\nnkfolder = nuke.re.split(r'/|\\\\' , nuke.os.environ\['HOME']) + \[ '.nuke' ]\n\ngoStore = nuke.toNode('store')\ngoStore\['fn'].execute()\ngoStore\['core'].execute()\n\n##########\n\npathSep = pathSeparator()\n\n### nuke logo\nnkLogo = nuke.os.sep.join( appPath() + \[ 'Documentation' , 'img' , 'nuke.png' ] ) #note2.png , tip2.png\n### nuke details\nnukeVer = \[ nuke.NUKE_VERSION_STRING , nuke.NUKE_VERSION_DATE , 'Install location : \{0\}'.format( nuke.os.sep.join(nuke.re.split(r'/|\\\\' , nuke.EXE_PATH)) ) ]\n### plugin path\npPath = \[ nuke.os.sep.join( nuke.re.split(r'/|\\\\', i ) ) for i in nuke.pluginPath() ]\npPath.sort()\n### shortcut\nhotkeyD = getHotkeys()\nshortcut = \[]\nfor name,hk in hotkeyD.items() :\n\tshortcut.append( \[name , hk] )\nshortcut.sort()\nhktable = ''\nfor col in shortcut :\n\thktable += '\t  <tr>\\n'\n\thktable += '\t\t<td width=\"50%\" class=\"leftCol\">\{0\}</td>\\n'.format( col\[0] )\n\thktable += '\t\t<td width=\"50%\" class=\"rightCol\">\{0\}</td>\\n'.format( col\[1] )\n\thktable += '\t  <tr>\\n'\n\n### HTML\nhtml = goStore\['htmlTemplate'].value()\n\nupdateHTML = html.replace('\$logo\$',nkLogo ).replace( '\$nukeVer\$' , '<br>\\n'.join(nukeVer) ).replace( '\$pluginPath\$' , '<br>\\n'.join( pPath ) ).replace( '\$shortcutContent\$' , hktable )\n\n##########\n\nif not nuke.os.path.exists( pathSep.join(nkfolder + \['MenuPy']) ) :\n\tnuke.os.mkdir( pathSep.join(nkfolder + \['MenuPy'] ) )\nfileout = open( pathSep.join(nkfolder + \['MenuPy','nuke_hotkeys.html']) , \"w\" )\nfileout.writelines( updateHTML )\nfileout.close()\n\nnukescripts.start( pathSep.join(nkfolder + \['MenuPy','nuke_hotkeys.html']) )" +STARTLINE}
 addUserKnob {20 tab_path l Path}
 addUserKnob {41 mod_path l "" -STARTLINE +INVISIBLE T path_ModifyMD.metadata}
 addUserKnob {41 saved_path l "" t "Show user that all plugin path set by MenuPy this tool." -STARTLINE T path_ViewMD.shownmetadata}
 addUserKnob {41 metadatafilter l "search metadata for" T path_ViewMD.metadatafilter}
 addUserKnob {41 metadatafiltermode l within T path_ViewMD.metadatafiltermode}
 addUserKnob {20 tab_defaultNodes l "Default Nodes"}
 addUserKnob {41 mod_default l "" +STARTLINE T default_ModifyMD.metadata}
 addUserKnob {41 saved_default l "" t "Show user that all default knobs set by MenuPy this tool." -STARTLINE T default_ViewMD.shownmetadata}
 addUserKnob {41 metadatafilter_1 l "search metadata for" T default_ViewMD.metadatafilter}
 addUserKnob {41 metadatafiltermode_1 l within T default_ViewMD.metadatafiltermode}
 addUserKnob {20 t_VERSION l Version}
 addUserKnob {26 l_VERSION l Version T 2.7}
 addUserKnob {26 l_DATE l "Date Modified" T 2021-03-17}
 addUserKnob {22 btn_CHANGELOG l Changelog T "log = \"2.7<br>-&nbsp;compatible&nbsp;with&nbsp;Nuke13&nbsp;(python3)<br><br>2.6<br>-&nbsp;fixed&nbsp;some&nbsp;error&nbsp;issue&nbsp;on&nbsp;python&nbsp;tools&nbsp;detection<br>-&nbsp;fixed&nbsp;fixed&nbsp;a&nbsp;minor&nbsp;error&nbsp;from&nbsp;developer's&nbsp;preset&nbsp;menu<br><br>2.5<br>-&nbsp;fixed&nbsp;code&nbsp;detection&nbsp;error&nbsp;from&nbsp;2.4&nbsp;.<br>&nbsp;&nbsp;*reported&nbsp;error&nbsp;in&nbsp;'pixelfudger'<br>-&nbsp;fixed&nbsp;icon&nbsp;path&nbsp;issue.<br><br>2.4<br>-&nbsp;if&nbsp;the&nbsp;tool&nbsp;(python)&nbsp;required&nbsp;its&nbsp;own&nbsp;installation,<br>&nbsp;&nbsp;this&nbsp;tool&nbsp;will&nbsp;skip&nbsp;that&nbsp;and&nbsp;send&nbsp;an&nbsp;notice&nbsp;to&nbsp;user.<br><br>2.3<br>-&nbsp;added&nbsp;by&nbsp;pass&nbsp;those&nbsp;python&nbsp;tool&nbsp;detect&nbsp;with&nbsp;error<br>&nbsp;&nbsp;to&nbsp;avoid&nbsp;nuke&nbsp;doesn't&nbsp;launch<br><br>2.2<br>-&nbsp;remove&nbsp;unnecessary&nbsp;import<br>-&nbsp;fixed&nbsp;conflict&nbsp;with&nbsp;escape&nbsp;character&nbsp;in&nbsp;the&nbsp;path.<br>&nbsp;&nbsp;It&nbsp;has&nbsp;problem&nbsp;if&nbsp;folder&nbsp;start&nbsp;with&nbsp;'t'&nbsp;,&nbsp;'n'&nbsp;or&nbsp;'r'&nbsp;before.<br><br>2.0<br>-&nbsp;re-work&nbsp;entire&nbsp;tool.<br>-&nbsp;support&nbsp;auto&nbsp;detect&nbsp;all&nbsp;the&nbsp;tools&nbsp;inside&nbsp;a&nbsp;folder.<br>&nbsp;&nbsp;support&nbsp;files&nbsp;:<br>&nbsp;&nbsp;*&nbsp;tools&nbsp;:&nbsp;*.gizmo,&nbsp;*.nk,&nbsp;*.py<br>&nbsp;&nbsp;*&nbsp;icons&nbsp;:&nbsp;*.png,&nbsp;*.jpg,&nbsp;*.jpeg,&nbsp;*.gif<br>-&nbsp;folder&nbsp;name&nbsp;=&nbsp;menu&nbsp;name&nbsp;,&nbsp;sub-folder&nbsp;=&nbsp;sub-menu&nbsp;name.<br>-&nbsp;menu&nbsp;can&nbsp;be&nbsp;customize&nbsp;with&nbsp;shortcut,&nbsp;shortcut&nbsp;context&nbsp;and<br>&nbsp;&nbsp;assign&nbsp;to&nbsp;different&nbsp;nuke.menu&nbsp;.<br>-&nbsp;easy&nbsp;setup&nbsp;node(s)'&nbsp;default&nbsp;knobs.<br>-&nbsp;print&nbsp;out&nbsp;Nuke&nbsp;settings&nbsp;in&nbsp;HTML&nbsp;format&nbsp;:<br>&nbsp;&nbsp;*&nbsp;version<br>&nbsp;&nbsp;*&nbsp;installed&nbsp;path<br>&nbsp;&nbsp;*&nbsp;all&nbsp;plugin&nbsp;paths<br>&nbsp;&nbsp;*&nbsp;all&nbsp;assigned&nbsp;hotkeys&nbsp;(shortcut)\"\nnuke.message( log )" +STARTLINE}
 addUserKnob {26 l_DEV l "Developed by" T "<a href=\"http://youtube.com/c/MJTLab\"><font color=orange>Mark Joey Tang</font></a>"}
}
 BackdropNode {
  inputs 0
  name BackdropNode1
  tile_color 0x191919ff
  label "dont touch"
  note_font_size 42
  xpos -202
  ypos -37
  bdwidth 287
  bdheight 312
 }
 BackdropNode {
  inputs 0
  name BackdropNode2
  tile_color 0x7f7f7fff
  label bin
  note_font_size 42
  xpos 148
  ypos -36
  bdwidth 351
  bdheight 307
 }
 ModifyMetaData {
  inputs 0
  metadata {
   {set "" ""}
  }
  name default_ModifyMD
  knobChanged "\ntry :\n    import mpyCore\n    nkfolder = nuke.re.split(r'/|\\\\' , nuke.os.environ\['HOME']) + \[ '.nuke' ]\n    prevKD = mpyCore.savedDefaultD()\n    nowKD = mpyCore.newDefaultD( nuke.thisGroup() )\n    mpyCore.runDefault( prevKD , nowKD )\n    context = \[]\n    for key,value in nowKD.items() :\n        context.append( '|'.join( \[ key.split('.')\[0] , key.split('.')\[1] , value ] ) + '\\n' )\n    if not nuke.os.path.exists( nuke.os.sep.join(nkfolder + \['MenuPy']) ) :\n        nuke.os.mkdir( nuke.os.sep.join(nkfolder + \['MenuPy'] ) )\n    mpyCore.fileWrite( nuke.os.sep.join(nkfolder + \[ 'MenuPy' , 'mpyDefault']) , context )\nexcept :\n    nuke.thisGroup()\['mod_path'].fromScript('\{\}')\n    nuke.thisGroup()\['mod_default'].fromScript('\{\}')\n"
  xpos -103
  ypos 100
 }
 ViewMetaData {
  name default_ViewMD
  xpos -103
  ypos 180
 }
 ModifyMetaData {
  inputs 0
  metadata {
   {set "" ""}
  }
  name path_ModifyMD
  xpos 205
  ypos 95
 }
 ViewMetaData {
  metadatafiltermode "values only"
  name path_ViewMD
  xpos 205
  ypos 175
 }
 NoOp {
  inputs 0
  name store
  selected true
  xpos 350
  ypos 94
  addUserKnob {20 User}
  addUserKnob {22 fn T "import sys\n\ndef mpyMSG( _code , _v1='' , _v2='' , _v3='' ) :\n\tif _code == 0 :\n\t\tnuke.message(\"New Path added.<br><br>New menu can be access now.\")\n\telif _code == 1 :\n\t\tnuke.message(\"<font color=orange>'\{0\}'</font> already assigned to <font color=orange>\{1\}</font>.<br><br>Cannot changed to this shortcut, please try another one.\".format( _v1 , _v2 ) )\n\telif _code == 2 :\n\t\tnuke.message(\"Invalid Shortcut.<br><br><font color=orange>'Shortcut Key'</font> <b>NOT MORE</b> than 1 character.<br><font color=orange>'\{0\}'</font> shortcut will NOT apply the change.<br><br>Process denied...\".format( _v1 ) )\n\telif _code == 3 :\n\t\tnuke.message(\"Invalid Shortcut.<br><br><font color=orange>'Shortcut Key'</font> <b>ONLY ACCEPT</b> 1 character while <font color=orange>'Shortcut Combo'</font> selected.<br><font color=orange>'\{0\}'</font> shortcut will NOT apply the change.<br><br>Process denied...\".format( _v1 ) )\n\telif _code == 4 :\n\t\tnuke.message(\"Nothing found in MenuPy's setting.\")\n\telif _code == 5 :\n\t\tnuke.message(\"Selected link removed from menu.\")\n\telif _code == 6 :\n\t\tnuke.message(\"Setting applied.\")\n\telif _code == 7 :\n\t\tnuke.message(\"No MenuPy setting found.<br><br>This setting ONLY apply on <font color=orange>MenuPy</font> generate menu.\")\n\telif _code == 8 :\n\t\tnuke.message(\"No MenuPy path found.<br><br>This setting ONLY apply on <font color=orange>MenuPy</font> generate menu.\")\n\telif _code == 9 :\n\t\tnuke.message(\"The followings are the default setting change :\{0\}\{1\}\{2\}\".format( _v1, _v2, _v3 ) )\n\telif _code == 10 : \n\t\tnuke.message(\"No node(s) selected.\")\n\telif _code == 11 : \n\t\tnuke.message(\"No changes found.\")\n\telif _code == 12 :\n\t\tnuke.message(\"Invalid profilePath.<br><br>Choose default or select a folder with custom path.\")\n\telif _code == 13 :\n\t\tnuke.message(\"No path set under MenuPy.\")\n\telif _code == 14 :\n\t\tnuke.message(\"\{0\}<br><br>had been reset.\".format( _v1 ) )\n\telif _code == 15 :\n\t\tnuke.message(\"No saved default setting found.\")\n\telif _code == 16 :\n\t\tnuke.message(\"Selected path does not exist.<br><br>Process denied...\")\n\n##########\n\ndef getLevel() :\n\tif len(nuke.thisNode().fullName().split('.')) == 1 :\n\t\tggLevel = nuke.root()\n\telse :\n\t\tnodePath = nuke.thisNode().fullName().split('.')\n\t\tnodePath.pop()\n\t\tggLevel = nuke.toNode('.'.join(nodePath))\n\treturn ggLevel\n\n##########\n\ndef getHotkeys( _order='normal' ) :\n\thotkeysD = \{\}\n\tif _order == 'normal' :\n\t\tfor i in nuke.hotkeys().split('\\n') :\n\t\t\tif len( i.strip().split('\\t') ) > 1 :\n\t\t\t\thotkeysD\[i.strip().split('\\t')\[0].lower()] = i.strip().split('\\t')\[1]\n\t\thotkeysD\['Quit'] = 'Ctrl+Q'\n\telif _order == 'reverse' :\n\t\tfor i in nuke.hotkeys().split('\\n') :\n\t\t\tif len( i.strip().split('\\t') ) > 1 :\n\t\t\t\thotkeysD\[i.strip().split('\\t')\[1].lower()] = i.strip().split('\\t')\[0]\n\t\thotkeysD\['Ctrl+Q'] = 'Quit'\n\treturn hotkeysD\n\n##########\n\ndef newUsrPath( _thisG ) :\n\tusrInput = \[ i for i in nuke.re.split(r'/|\\\\' , _thisG\['customPath'].value()) if len(i) ]\n\treturn usrInput\n\n##########\n\ndef fileCheck( _context , _fileType ) :\n\tfileStatus = \{\n\t\t\t\t\t'toolRange' : \[ 0 , 0 ] , \n\t\t\t\t\t'toolStatus' : \[ False , False , False ] ,\n\t\t\t\t\t'existPath' : \[]\n\t\t\t\t\t\}\n\tfor key,line in enumerate( _context ) :\n\t\tif line\[:25] == '### MenuPy 2.0 start here' :\n\t\t\tfileStatus\['toolRange']\[0] = key\n\t\t\tfileStatus\['toolStatus']\[0] = True\n\t\tif line\[:23] == '### MenuPy 2.0 end here' :\n\t\t\tfileStatus\['toolRange']\[1] = key\n\t\t\tfileStatus\['toolStatus']\[1] = True\n\n\t\tif _fileType == 'init' :\n\t\t\tif line\[:32] == 'def MenuPyAddPath( _mainPath ) :' :\n\t\t\t\tfileStatus\['toolStatus']\[2] = True\n\t\t\tif line\[:14] == 'MenuPyAddPath(' :\n\t\t\t\tfileStatus\['existPath'].append( \[ i for i in nuke.re.split(r'/|\\\\' , line.split('\"')\[1]) if len(i) ] )\n\n\t\tif _fileType == 'menu' :\n\t\t\tif line \[:14] == 'import mpyCore' :\n\t\t\t\tfileStatus\['toolStatus']\[2] = True\n\t\t\tif line\[:22] == 'mpyCore.MenuPyAutogen(' :\n\t\t\t\tfileStatus\['existPath'].append( \[ i for i in nuke.re.split(r'/|\\\\' , line.split('\"')\[1]) if len(i) ] )\n\n\t\tif _fileType == 'knobDefault' :\n\t\t\tif line \[:14] == 'import mpyCore' :\n\t\t\t\tfileStatus\['toolStatus']\[2] = True\n\t\t\tif line\[:24] == 'mpyCore.MenuSetDefault()' :\n\t\t\t\tfileStatus\['existPath'] = \[ \"commandExist\" ]\n\n\treturn fileStatus\n\n##########\n\ndef brokenDetect( _context , _mode ) :\n\ttemplateCode = nuke.toNode('store')\['initTemplate'].value().split('\\n')\n\tcodeLength = len(templateCode) - 3\n\tdetect = \{ \n\t\t\t\t'toolRange' : \[ 0 , 0 ] , \n\t\t\t\t'existPath' : \[]\n\t\t\t\t\}\n\tpathSep = pathSeparator()\n\n\tif _mode == 'no_closing' :\n\t\tfor key,line in enumerate( _context ) :\n\t\t\tif line\[:25] == '### MenuPy 2.0 start here' :\n\t\t\t\tdetect\['toolRange']\[0] = key\n\t\t\tif line\[:32] == 'def MenuPyAddPath( _mainPath ) :' :\n\t\t\t\tdetect\['toolRange']\[1] = key + codeLength\n\t\t\tif line\[:14] == 'MenuPyAddPath(' :\n\t\t\t\tdetect\['existPath'].append( \[ i for i in nuke.re.split(r'/|\\\\' , line.split('\"')\[1]) if len(i) ] )\n\t\t\t\tdetect\['toolRange']\[1] = key\n\tif _mode == 'no_opening' :\n\t\tfor key,line in enumerate( _context ) :\n\t\t\tif line\[:32] == 'def MenuPyAddPath( _mainPath ) :' :\n\t\t\t\tdetect\['toolRange']\[0] = key\n\t\t\tif line\[:23] == '### MenuPy 2.0 end here' :\n\t\t\t\tdetect\['toolRange']\[1] = key\n\t\t\tif line\[:14] == 'MenuPyAddPath(' :\n\t\t\t\tdetect\['existPath'].append( \[ i for i in nuke.re.split(r'/|\\\\' , line.split('\"')\[1]) if len(i) ] )\n\tif _mode == 'only_code' :\n\t\tfor key,line in enumerate( _context ) :\n\t\t\tif line\[:32] == 'def MenuPyAddPath( _mainPath ) :' :\n\t\t\t\tdetect\['toolRange']\[0] = key\n\t\t\t\tdetect\['toolRange']\[1] = key + codeLength\n\t\t\tif line\[:14] == 'MenuPyAddPath(' :\n\t\t\t\tdetect\['existPath'].append( \[ i for i in nuke.re.split(r'/|\\\\' , line.split('\"')\[1]) if len(i) ] )\n\t\t\t\tdetect\['toolRange']\[1] = key\n\n\tfor count in xrange( detect\['toolRange']\[0] , detect\['toolRange']\[1]+1 , 1 ) :\n\t\t _context.pop( detect\['toolRange']\[0] )\n\tfor ePath in detect\['existPath'] :\n\t\ttemplateCode.insert( len(templateCode)-1 , 'MenuPyAddPath( \"\{0\}\" )'.format( pathSep.join(ePath) ) )\n\tfixContext = \[ i + '\\n' for i in templateCode ]\n\t_context += fixContext\n\n\treturn _context\n\n##########\n\ndef createNewCode( _usrInput , _fileType ) :\n\tpathSep = pathSeparator()\n\n\tif _fileType == 'init' :\n\t\ttemplateCode = nuke.toNode('store')\['initTemplate'].value().split('\\n')\n\t\ttemplateCode.insert( len(templateCode)-1 , 'MenuPyAddPath( \"\{0\}\" )'.format( pathSep.join(_usrInput) ) )\n\tif _fileType == 'menu' :\n\t\ttemplateCode = nuke.toNode('store')\['menuTemplate'].value().split('\\n')\n\t\ttemplateCode.insert( len(templateCode)-1 , 'mpyCore.MenuPyAutogen( \"\{0\}\" )'.format( pathSep.join(_usrInput) ) )\n\treturn \[ i + '\\n' for i in templateCode ]\n\n##########\n\ndef createNewDefault() :\n\ttemplateCode = nuke.toNode('store')\['menuTemplate'].value().split('\\n')\n\ttemplateCode.insert( len(templateCode)-1 , 'mpyCore.MenuSetDefault()' )\n\treturn \[ i + '\\n' for i in templateCode ]\n\n##########\n\ndef updateNewCode( _usrInput , _status , _context , _fileType ) :\n\tpathSep = pathSeparator()\n\n\tif _usrInput not in _status\['existPath'] :\n\t\tif _fileType == 'init' :\n\t\t\t_context.insert( _status\['toolRange']\[1] , 'MenuPyAddPath( \"\{0\}\" )\\n'.format( pathSep.join(_usrInput) ) )\n\t\tif _fileType == 'menu' :\n\t\t\t_context.insert( _status\['toolRange']\[1] , 'mpyCore.MenuPyAutogen( \"\{0\}\" )\\n'.format( pathSep.join(_usrInput) ) )\n\treturn _context\n\n##########\n\ndef updateNewDefault( _status , _context ) :\n\t_context.insert( _status\['toolRange']\[1] , 'mpyCore.MenuSetDefault()\\n' )\n\treturn _context\n\n##########\n\ndef selectItemPanel( _items ) :\n\tp = nuke.Panel('MenuPy - menu item select')\n\tp.addEnumerationPulldown('select items : ' , ' '.join( \['\"'+i+'\"' for i in _items ] ) )\n\tp.addButton('Close')\n\tp.addButton('Edit')\n\tp.setWidth(450)\n\treturn ( p , p.show() )\n\n##########\n\ndef editItemPanel( _defaultOpt ) :\n\tp = nuke.Panel('MenuPy - menu item setting')\n\tp.addEnumerationPulldown( 'Shortcut Combo : ' , ' '.join( _defaultOpt\['shortcut'] ) )\n\tp.addSingleLineInput( 'Shortcut Key : ' , _defaultOpt\['scKey'] )\n\tp.addEnumerationPulldown( 'Shortcut Context : ' , ' '.join( _defaultOpt\['shortcutContext'] ) )\n\tp.addEnumerationPulldown( 'Menu : ' , ' '.join( _defaultOpt\['menu']) )\n\tp.addButton('Close')\n\tp.addButton('Apply')\n\tp.addButton('Cancel')\n\treturn ( p , p.show() )\n\n##########\n\ndef defaultSettingMainPanel() :\n\tp = nuke.Panel('MenuPy - default knob setting')\n\tp.addButton('Close')\n\tp.addButton('Save selected node class as default')\n\tp.addButton('Reset node class default setting')\n\treturn p.show()\n\n##########\n\ndef resetNodesPanel( _savedClass ) :\n\tp = nuke.Panel('MenuPy - reset node class default')\n\tfor i in _savedClass :\n\t\tp.addBooleanCheckBox( i , False )\n\tp.setWidth(300)\n\treturn ( p , p.show() )\n\n##########\n\ndef removePathPanel( _links ) :\n\tp = nuke.Panel(\"MenuPy - remove paths\")\n\tfor i in  _links :\n\t\tp.addBooleanCheckBox( i , False )\n\tp.setWidth(300)\n\treturn ( p , p.show() )\n\n##########\n\ndef assignModified( _ePanelData , _sPanelData , _allHotkeys ) :\n\tmsg = 0\n\tdata = \['','','']\n\tif _ePanelData.value('Shortcut Combo : ') == 'none' :\n\t\tif len( _ePanelData.value('Shortcut Key : ').replace(' ','') ) <= 1 :\n\t\t\tdata\[0] = \"shortcut='\{0\}'\".format( _ePanelData.value('Shortcut Key : ').replace(' ','').lower() )\n\t\telse :\n\t\t\tdata\[0] = 'no_change'\n\t\t\tmpyMSG( 2 , _sPanelData.value('select items : ') )\n\telse :\n\t\tif len( _ePanelData.value('Shortcut Key : ').replace(' ','') ) == 1 :\n\t\t\tdata\[0] = 'shortcut=\\'\{0\}\\''.format( _ePanelData.value('Shortcut Combo : ') + _ePanelData.value('Shortcut Key : ').replace(' ','').lower() )\n\t\telse :\n\t\t\tdata\[0] = 'no_change'\n\t\t\tmpyMSG( 3 , _sPanelData.value('select items : ') )\n\n\ttry :\n\t\tif _allHotkeys\[data\[0].split('\\'')\[1]] != sPanel\[0].value('select items : ').split('/')\[-1:]\[0] :\n\t\t\tcheck = \[ data\[0].split('\\'')\[1] , _allHotkeys\[data\[0].split('\\'')\[1]] ]\n\t\t\tdata\[0] = 'no_change'\n\t\t\tmpyMSG( 1 , check\[0] , check\[1] )\n\texcept :\n\t\tpass\n\n\tdata\[1] = 'shortcutContext=\{0\}'.format( _ePanelData.value('Shortcut Context : ').split(' ')\[0] )\n\tdata\[2] = _ePanelData.value('Menu : ')\n\treturn data\n\n##########\n\ndef getCurSetting( _mitem , _dSetting ) :\n\tcombo = _mitem\[3].split('\\'')\[1]\[:-1]\n\tif len(combo) :\n\t\t_dSetting\['shortcut'].remove(combo)\n\t\t_dSetting\['shortcut'].insert(0, combo)\n\t\n\t_dSetting\['scKey'] = _mitem\[3].split('\\'')\[1]\[-1:]\n\t\n\tshcutCon = int( _mitem\[4].split('=')\[1] )\n\ttemp = _dSetting\['shortcutContext']\[shcutCon]\n\t_dSetting\['shortcutContext'].pop(shcutCon)\n\t_dSetting\['shortcutContext'].insert(0, temp)\n\n\tif _mitem\[5] == 'Node Graph' :\n\t\t_dSetting\['menu'].remove( '\"' + _mitem\[5] + '\"' )\n\t\t_dSetting\['menu'].insert(0, '\"' + _mitem\[5] + '\"' )\n\telse :\n\t\t_dSetting\['menu'].remove( _mitem\[5] )\n\t\t_dSetting\['menu'].insert(0, _mitem\[5] )\n\n\treturn _dSetting\n\n##########\n\ndef MenuGetPath( _initContext=\[] , _menuContext=\[] , _settingContext=\[] ) :\n\tpathSep = pathSeparator()\n\n\tlinkDetect = \{\}\n\tfor key,line in enumerate( _initContext ) :\n\t\tif line\[:14] == 'MenuPyAddPath(' :\n\t\t\tif sys.platform\[:5] == 'linux' or  sys.platform == 'darwin' :\n\t\t\t\tlinkDetect\[ line.split('\"')\[1] ] = \[ \[key] ]\n\t\t\telse :\n\t\t\t\tlinkDetect\[ line.split('\"')\[1] ] = \[ \[key] ]\n\tfor link in linkDetect.keys() :\n\t\ttemp = \[]\n\t\tfor key,line in enumerate( _menuContext ) :\n\t\t\ttry :\n\t\t\t\tif line\[:22] == 'mpyCore.MenuPyAutogen(' and line.split('\"')\[1] == link :\n\t\t\t\t\ttemp.append( key )\n\t\t\texcept :\n\t\t\t\tpass\n\t\tlinkDetect\[link].append(temp)\n\tfor link in linkDetect.keys() :\n\t\ttemp = \[]\n\t\tfor key,line in enumerate( _settingContext ) :\n\t\t\tif line.split('|')\[0] == link :\n\t\t\t\ttemp.append( key )\n\t\tlinkDetect\[link].append(temp)\n\treturn linkDetect\n\n##########\n\ndef getNonDefault() :\n\tnodeND = \{\}\n\tnodeFilter = \['Group']\n\tspNodes = \['Roto','RotoPaint']\n\tknobsFilter = \['xpos','ypos','selected','name','indicators','toolbox','curves']\n\tselNodes = \[]\n\n\tfor node in nuke.selectedNodes() :\n\t\tselNodes.append(node)\n\t\tnode.setSelected(False)\n\n\tfor node in selNodes :\n\t\tchgNode = node\n\t\tif chgNode.Class() not in nodeFilter :\n\t\t\tif chgNode.Class() in spNodes :\n\t\t\t\trawNode = eval( \"nuke.createNode('\{0\}','',False)\".format( chgNode.Class() ) )\n\t\t\telse :\n\t\t\t\trawNode = eval( \"nuke.nodes.\{0\}()\".format( chgNode.Class() ) )\n\n\t\t\tfor knob in chgNode.knobs() :\n\t\t\t\tif knob not in knobsFilter :\n\t\t\t\t\tif chgNode\[knob].toScript() != rawNode\[knob].toScript() :\n\t\t\t\t\t\tnodeND\[ '.'.join( \[ chgNode.Class() , knob] ) ] = chgNode\[knob].toScript()\n\t\t\tnuke.delete( rawNode )\n\n\tfor node in selNodes :\n\t\tnode.setSelected(True)\n\treturn nodeND\n\n##########\n\ndef getSelNodesInfo( _classFilter ) :\n\tselNodes = \{\}\n\tfor node in nuke.selectedNodes() :\n\t\tif node.Class() not in _classFilter :\n\t\t\tselNodes\[node.Class()] = node\n\treturn selNodes\n\n##########\n\ndef MenuPyUIPath( _thisG ) :\n\tpathSep = pathSeparator()\n\t\n\tnkfolder = nuke.re.split(r'/|\\\\' , nuke.os.environ\['HOME']) + \[ '.nuke' ]\n\tif nuke.os.path.exists( pathSep.join(nkfolder + \['init.py']) ) :\n\t\tinitContext = fileRead( pathSep.join(nkfolder + \['init.py']) )\n\t\tmpyLinked = MenuGetPath( _initContext=fileRead( nuke.os.sep.join(nkfolder + \['init.py']) ) )\n\t\tdata = \[ '\{' + 'set \"\{0\}\" \"\{1\}\"'.format( 'path'+str(key) , path.replace('\\\\','/') ) + '\}' for key,path in enumerate(mpyLinked.keys()) ]\n\t\t_thisG\['mod_path'].fromScript( '\\n'.join(data) )\n\n##########\n\ndef MenuPyUIDefault( _thisG ) :\n\tpathSep = pathSeparator()\n\n\tnkfolder = nuke.re.split(r'/|\\\\' , nuke.os.environ\['HOME']) + \[ '.nuke' ]\n\tif nuke.os.path.exists( pathSep.join(nkfolder + \[ 'MenuPy' , 'mpyDefault']) ) :\n\t\tdata = \[]\n\t\tfor line in fileRead( pathSep.join(nkfolder + \[ 'MenuPy' , 'mpyDefault']) ) :\n\t\t\ttemp = line.replace('\\n','').split('|')\n\t\t\tdata.append( '\{' + 'set \"\{0\}\" \"\{1\}\"'.format( '.'.join(temp\[:2]) , temp\[2] ) + '\}' )\n\t\t_thisG\['mod_default'].fromScript( '\\n'.join(data) )\n\n##########\n\ndef menuRefresh() :\n\tpathSep = pathSeparator()\n\n\t### get path and menu name for refresh\n\tmpyPath = MenuGetPath( _initContext=fileRead( pathSep.join(nkfolder + \['init.py']) ) ).keys()\n\tmenuName = \[ nuke.os.path.split(i)\[1] for i in mpyPath ]\n\n\tallMenu = \['Nuke','Nodes','Pane','Properties','Animation','Viewer','\"Node Graph\"','Axis']\n\n\tfor name in menuName :\n\t\tfor menu in allMenu :\n\t\t\ttry :\n\t\t\t\tif menu == 'Axis' :\n\t\t\t\t\tnuke.menu(menu).findItem('File').removeItem(name)\n\t\t\t\t\tnuke.menu(menu).findItem('Snap').removeItem(name)\n\t\t\t\telse :\n\t\t\t\t\tnuke.menu(menu).removeItem(name)\n\t\t\texcept :\n\t\t\t\tpass\n\n\tfor path in mpyPath :\n\t\tMenuPyAutogen( path )\n\n##########\n\ndef updateMD( _thisG , _defaultItems ) :\n\tupdateMD = \[]\n\tfor key,value in _defaultItems.items() :\n\t\tupdateMD.append( '\{' + 'set \"\{0\}\" \"\{1\}\"'.format( key, value ) + '\}' )\n\t_thisG\['mod_default'].fromScript( '\\n'.join(updateMD) )" +STARTLINE}
  addUserKnob {22 initTemplate T "### MenuPy 2.0 start here\ndef MenuPyAddPath( _mainPath ) :\n\ttry :\n\t\tfileEXT = ( '.nk' , '.gizmo' , '.py' , '.png' , '.jpg' , '.jpeg' )\n\t\tfor root, dirs, files in os.walk( _mainPath ) :\n\t\t\tfor file in files :\n\t\t\t\tif file.endswith( fileEXT ) :\n\t\t\t\t\tnuke.pluginAddPath( root )\n\texcept :\n\t\tpass\n\n### MenuPy 2.0 end here" +STARTLINE}
  addUserKnob {22 menuTemplate -STARTLINE T "### MenuPy 2.0 start here\nimport mpyCore\n### MenuPy 2.0 end here"}
  addUserKnob {22 htmlTemplate -STARTLINE T "<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n<title>MenuPy - setting of this Nuke</title>\n<style type=\"text/css\">\nbody \{\n\tbackground-color: #333;\n\tmargin-top : 0px;\n\}\nbody,td,th \{\n\tfont-family: Verdana, Geneva, sans-serif;\n\tcolor: #FFF;\n\}\n.stdTable \{\n\tborder-top-style: none;\n\tborder-right-style: none;\n\tborder-bottom-style: none;\n\tborder-left-style: none;\n\tborder-bottom-width: 0px;\n\}\n.nukeLogo \{\n\tbackground-color: #aaa;\n\}\n.leftCol \{\n\ttext-align: center;\n\tpadding-right: 50px;\n\tfont-family: Verdana, Geneva, sans-serif;\n\}\n.rightCol \{\n\ttext-align: center;\n\tpadding-left: 50px;\n\tfont-family: Verdana, Geneva, sans-serif;\n\}\n.leftTitleCol \{\n\tborder-bottom-width: 1px;\n\tborder-bottom-style: solid;\n\tborder-bottom-color: #FFF;\n\ttext-align: center;\n\tpadding-right: 50px;\n\}\n.rightTitleCol \{\n\tborder-bottom-width: 1px;\n\tborder-bottom-style: solid;\n\tborder-bottom-color: #FFF;\n\ttext-align: center;\n\tpadding-left: 50px;\n\}\n.context \{\n\tfont-family: Verdana, Geneva, sans-serif;\n\}\n.headingCell \{\n  border-bottom-width: 1px;\n  border-bottom-style: solid;\n  border-bottom-color: #FFF;\n\}\n.headingFont \{\n  font-family: \"Arial Black\", Gadget, sans-serif;\n\}\n.menupyTag \{\n\ttext-align: right;\n\tfont-family: Verdana, Geneva, sans-serif;\n\tfont-size: 12px;\n\tfont-style: italic;\n\tcolor: #999;\n\}\n</style>\n</head>\n\n<body>\n<table width=\"80%\" align=\"center\">\n  <tr>\n\t<td>\n\t\t<p><img src=\"\$logo\$\"></p>\n\t\t<p class=\"context\">\$nukeVer\$</p>\n\t\t<br>\n\t\t<table width=\"100%\" align=\"center\" class=\"stdTable\">\n\t\t  <tr>\n\t\t\t<td class=\"headingCell\"><span class=\"headingFont\">Plugin Path</span></td>\n\t\t  </tr>\n\t\t  <tr>\n\t\t\t<td><span class=\"context\">\$pluginPath\$</span></td>\n\t\t  </tr>\n\t\t</table>\n\t\t<br>\n\t\t<br>\n\t\t<br>\n\t\t<table width=\"100%\" align=\"center\" class=\"stdTable\">\n\t\t  <tr class=\"header\">\n\t\t\t<td width=\"50%\" class=\"leftTitleCol\"><span class=\"headingFont\">Menu Item</span></td>\n\t\t\t<td width=\"50%\" class=\"rightTitleCol\"><span class=\"headingFont\">Shortcut</span></td>\n\t\t  </tr>\n\t\$shortcutContent\$\n\t\t</table>\n\t\t<br>\n\t\t<p class=\"menupyTag\">This page generated by MenuPy tool.</p>\n\t</td>\n  </tr>\n</table>\n<br>\n</body>\n</html>"}
  addUserKnob {22 core T "import nuke, sys\n\ndef printPy2v3( _content ) :\n\ttry :\n\t\tprint (_content)\n\texcept SyntaxError :\n\t\teval( \"print _content\" )\n\n##########\n\ndef fileRead( _path ) :\n\ttry :\n\t\tfile = open( _path , 'r')\n\t\tcontext = file.readlines()\n\t\tfile.close()\n\texcept :\n\t\tfile = open( _path , 'w')\n\t\tfile.close()\n\t\tcontext = \[]\n\treturn context\n\n##########\n\ndef fileWrite( _path , _context ) :\n\tfile = open( _path , 'w' )\n\tfile.write( ''.join( _context ) )\n\tfile.close()\n\n##########\n\ndef appPath() :\n\tpathSep = pathSeparator()\n\n\tif sys.platform ==  'darwin' :\n\t\tappBase = nuke.EXE_PATH.split('.app')\[0].split( pathSep )\[:-1]\n\telse :\n\t\tappBase = nuke.os.path.split( nuke.EXE_PATH )\[0].replace('/', pathSep ).split( pathSep )\n\treturn appBase\n\n##########\n\ndef MenuSetDefault() :\n\tpathSep = pathSeparator()\n\n\tnkfolder = nuke.re.split(r'/|\\\\' , nuke.os.environ\['HOME']) + \[ '.nuke' ]\n\tdefaultContext = \[ i.replace('\\n','').split('|') for i in fileRead(pathSep.join(nkfolder + \[ 'MenuPy' , 'mpyDefault'])) ]\n\n\tif len(defaultContext) :\n\t\tfor data in defaultContext :\n\t\t\teval( \"nuke.knobDefault('\{0\}.\{1\}', '\{2\}')\".format( data\[0] , data\[1] , data\[2] ) )\n\n##########\n\ndef pathSeparator() :\n\tpathSeparator = '/'\n\treturn pathSeparator\n\n##########\n\ndef newDefaultD( _thisG ) :\n\tspchar = \['\\\\\[','\\\\\{','\\\\\}','\\\\\"','\\\\\\\\\\\\\\\\','\\\\\$']\n\tnItems = \{\}\n\ttry :\n\t\tfor i in _thisG\['mod_default'].toScript().split('\\n') :\n\t\t\ttemp = \[]\n\t\t\ttemp.append( i\[1:-1].split(' ')\[1].split('.')\[0] )\n\t\t\ttemp.append( i\[1:-1].split(' ')\[1].split('.')\[1] )\n\t\t\ttemp.append( ' '.join( i\[1:-1].split(' ')\[2:] ) )\n\n\t\t\tif temp\[2]\[0] == '\"' and temp\[2]\[-1] == '\"' :\n\t\t\t\ttemp\[2] = temp\[2]\[1:-1]\n\n\t\t\tfor j in spchar :\n\t\t\t\tif temp\[2].find(j) >= 0 :\n\t\t\t\t\ttemp\[2] = temp\[2].replace( j , j\[1:] )\n\n\t\t\tnItems\[ '.'.join( temp\[0:2] ) ] = temp\[2]\n\texcept :\n\t\tpass\n\treturn nItems\n\n##########\n\ndef savedDefaultD() :\n\tpathSep = pathSeparator()\n\n\tnkfolder = nuke.re.split(r'/|\\\\' , nuke.os.environ\['HOME']) + \[ '.nuke' ]\n\tdItems = \{\}\n\tfor line in fileRead( pathSep.join(nkfolder + \[ 'MenuPy' , 'mpyDefault']) ) :\n\t\ttemp = line.replace('\\n','').split('|')\n\t\tdItems\[ '.'.join(temp\[:2])] = temp\[2]\n\treturn dItems\n\n##########\n\ndef runDefault( _old , _new ) :\n\tfor key,value in _old.items() :\n\t\ttry :\n\t\t\t_new\[key]\n\t\texcept :\n\t\t\tif key == 'Roto.output' :\n\t\t\t\tnuke.knobDefault(key, 'alpha')\n\t\t\telse :\n\t\t\t\tnuke.knobDefault(key, '')\n\tfor key,value in _new.items() :\n\t\ttry :\n\t\t\t_oldD\[key]\n\t\texcept :\n\t\t\tnuke.knobDefault(key, value)\n\n##########\n\ndef MenuPyAutogen( _thisPath , _mode=0 ) :\n\tif not nuke.os.path.exists( _thisPath ) :\n\t\tprint ('\{0\} --- Does not exist'.format( _thisPath ))\n\telse :\n\t\tnkfolder = nuke.re.split(r'/|\\\\' , nuke.os.environ\['HOME']) + \[ '.nuke' ]\n\t\tcitems = \{\}\n\t\tpyFN = \{\}\n\t\tpyCMD = \{\}\n\t\tsettingVar = \[]\n\t\tFFilter = \{\n\t\t\t\t'exact' : \['mpycore', 'init'] , \n\t\t\t\t'excluded' : \[ 'preferences']\n\t\t\t\t\}\n\t\tpathSep = pathSeparator()\n\t\t\n\t\tdef MenuNodeLines( _curPath , _root , _file , _ext , _ico , _setting , _mode) :\n\t\t\ticon = menuIcon( _ico , _file )\n\t\t\tmenuName = nuke.os.path.split( _curPath )\[1]\n\t\t\t\n\t\t\t### add menu icon\n\t\t\tif nuke.NUKE_VERSION_MAJOR >= 12 :\n\t\t\t\tmpyIcon = pathSep.join( appPath() + \[ 'Documentation' , 'html' , 'content' , 'resources' , 'images' , 'note2.png' ] ) #note2.png , tip2.png\n\t\t\telif  nuke.NUKE_VERSION_MAJOR == 11 :\n\t\t\t\tmpyIcon = pathSep.join( appPath() + \[ 'Documentation' , 'html' , 'content' , 'assets' , 'images' , 'note2.png' ] ) #note2.png , tip2.png\n\t\t\telif nuke.NUKE_VERSION_MAJOR <= 10 :\n\t\t\t\tmpyIcon = pathSep.join( appPath() + \[ 'Documentation' , 'html' , 'content' , 'assets' , 'images' , 'tables_checkmark.png' ] )\n\t\t\tnuke.menu('Nodes').addMenu( menuName , icon=mpyIcon)\n\n\t\t\t### create menu for root or sub menu\n\t\t\tfolder = '/'.join( \[ i for i in _root\[len(_curPath):].replace('\\\\','/').split('/') if len(i) ] )\n\t\t\tif len(folder) :\n\t\t\t\tmenu = '\"' + '/'.join( \[ menuName , folder , nuke.os.path.splitext(_file)\[0] ] ) + '\"'\n\t\t\telse :\n\t\t\t\tmenu = '\"' + '/'.join( \[ menuName , nuke.os.path.splitext(_file)\[0] ] ) + '\"'\n\n\t\t\t### command for different file type\n\t\t\tif _ext == '.nk' :\n\t\t\t\tcmd = '\"' + \"nuke.nodePaste('\{0\}')\".format( '/'.join( nuke.re.split(r'/|\\\\', _root ) + \[ _file ] ) ) + '\"'\n\t\t\tif _ext == '.gizmo' :\n\t\t\t\tcmd = '\"' + \"nuke.createNode('\{0\}')\".format( nuke.os.path.splitext(_file)\[0] ) + '\"'\n\n\t\t\tcmdSetting = MenuCMDSetup( \[ _curPath , menu , cmd ] , _setting , 'Nodes' )\n\t\t\targ = ','.join( \[ cmdSetting\[1] , cmdSetting\[2] , cmdSetting\[3] , \"icon='\{0\}'\".format( icon ) , cmdSetting\[4] ] )\n\t\t\t\n\t\t\tif not _mode :\n\t\t\t\tMenuEval( cmdSetting\[5] , arg )\n\t\t\t\tprintPy2v3('\{0\} --- Loaded'.format( _file ))\n\n\t\t\treturn '|'.join( cmdSetting )\n\n\t\tdef MenuCodeCMD( _curPath , _cmd , _ico , _setting , _mode ) :\n\t\t\tmenuName = nuke.os.path.split( _curPath )\[1]\n\t\t\tcmdData = \{\}\n\n\t\t\tfor key,value in _cmd.items() :\n\t\t\t\tif len(value) :\n\t\t\t\t\tfor i in value :\n\t\t\t\t\t\timMod = i\[1].replace('\"','').split('.')\[0]\n\t\t\t\t\t\tcmd = '\"' + '.'.join( \[ \"__import__('\" + imMod + \"')\" , '.'.join( i\[1].split('.')\[1:] ) ] ) + '\"'\n\n\t\t\t\t\t\tif len(value) > 1 :\n\t\t\t\t\t\t\tmenu = '\"' + '/'.join( \[ menuName , imMod , i\[0].replace('\"','\\'') ] ) + '\"'\n\t\t\t\t\t\telse :\n\t\t\t\t\t\t\tmenu = '\"' + '/'.join( \[ menuName , i\[0].replace('\"','\\'') ] ) + '\"'\n\n\t\t\t\t\t\ticon = menuIcon( _ico , imMod )\n\t\t\t\t\t\tcmdSetting = MenuCMDSetup( \[ _curPath , menu , cmd ] , _setting , 'Nuke' )\n\t\t\t\t\t\targ = ','.join( \[ cmdSetting\[1] , cmdSetting\[2] , cmdSetting\[3] , \"icon='\{0\}'\".format( icon ) , cmdSetting\[4] ] )\n\n\t\t\t\t\t\tif not _mode :\n\t\t\t\t\t\t\tMenuEval( cmdSetting\[5] , arg )\n\n\t\t\t\t\t\ttry :\n\t\t\t\t\t\t\tcmdData\[ '|'.join( \[key,imMod,cmd]) ].append( '|'.join( cmdSetting ) )\n\t\t\t\t\t\texcept :\n\t\t\t\t\t\t\tcmdData\[ '|'.join( \[key,imMod,cmd]) ] = '|'.join( cmdSetting )\n\t\t\t\t\t\n\t\t\t\t\tif not _mode :\n\t\t\t\t\t\tprintPy2v3('\{0\} --- Loaded'.format( imMod ))\n\t\t\treturn cmdData\n\n\t\tdef MenuCodeDEF( _curPath , _def , _cmdDataKey , _ico , _setting , _mode ) :\n\t\t\tmenuName = nuke.os.path.split( _curPath )\[1]\n\t\t\tcmdMod = \[ i.split('|')\[1] for i in _cmdDataKey ]\n\t\t\tfnData = \[]\n\n\t\t\tfor key,value in _def.items() :\n\t\t\t\tif len(value) :\n\t\t\t\t\timMod = nuke.os.path.split(key)\[1].split('.')\[0]\n\t\t\t\t\t#printPy2v3(imMod)\n\t\t\t\t\t#printPy2v3(value)\n\t\t\t\t\t#printPy2v3(cmdMod)\n\t\t\t\t\tif imMod not in cmdMod :\n\t\t\t\t\t\tfor i in value :\n\t\t\t\t\t\t\tif len(value) > 1 :\n\t\t\t\t\t\t\t\tmenu = '\"' + '/'.join( \[ menuName , imMod , i.split('(')\[0].replace('\"','\\'') ] ) + '\"'\n\t\t\t\t\t\t\telse :\n\t\t\t\t\t\t\t\tmenu = '\"' + '/'.join( \[ menuName , i.split('(')\[0].replace('\"','\\'') ] ) + '\"'\n\t\t\t\t\t\t\tcmd = '\"' + '.'.join( \[ \"__import__('\" + imMod + \"')\" , i ] ) + '\"'\n\t\t\t\t\t\t\ticon = menuIcon( _ico , imMod )\n\n\t\t\t\t\t\t\tcmdSetting = MenuCMDSetup( \[ _curPath , menu , cmd ] , _setting , 'Nuke' )\n\t\t\t\t\t\t\targ = ','.join( \[ cmdSetting\[1] , cmdSetting\[2] , cmdSetting\[3] , \"icon='\{0\}'\".format( icon ) , cmdSetting\[4] ] )\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif not _mode :\n\t\t\t\t\t\t\t\tMenuEval( cmdSetting\[5] , arg )\n\n\t\t\t\t\t\t\tfnData.append( '|'.join( cmdSetting ) )\n\n\t\t\t\t\tif not _mode :\n\t\t\t\t\t\tprintPy2v3('\{0\} --- Loaded'.format( imMod ))\n\t\t\treturn fnData\n\n\t\tdef MenuSettingWrite( _path , _existContext , _newContext ) :\n\t\t\tcontextA = \{\}\n\t\t\tfor i in \[ i.replace('\\n','') for i in _existContext ] :\n\t\t\t\tcontextA\['_'.join(i.split('|')\[:3])] = i\n\t\t\tcontextB = \{\}\n\t\t\tfor i in _newContext :\n\t\t\t\tcontextB\['_'.join(i.split('|')\[:3])] = i\n\n\t\t\tfor key,value in contextB.items() :\n\t\t\t\ttry :\n\t\t\t\t\tcontextA\[key]\n\t\t\t\texcept :\n\t\t\t\t\tcontextA\[key] = value\n\n\t\t\tfile = open( _path , 'w' )\n\t\t\tfile.write( '\\n'.join( contextA.values() ) )\n\t\t\tfile.close()\n\n\t\tdef MenuCMDSetup( _id , _data , _defaultMenu ) :\n\t\t\targ = \[ _id\[0] , _id\[1] , _id\[2] , \"shortcut=''\" , \"shortcutContext=0\" , _defaultMenu ]\n\t\t\tfor line in _data :\n\t\t\t\ttemp = line.replace('\\n','').split('|')\n\t\t\t\tif _id\[0] in line and _id\[1] in line and _id\[2] in line :\n\t\t\t\t\targ\[3] = temp\[3]\n\t\t\t\t\targ\[4] = temp\[4]\n\t\t\t\t\targ\[5] = temp\[5]\n\t\t\treturn arg\n\n\t\tdef MenuEval( _menu , _arg ) :\n\t\t\tif _menu\[:4] == 'Axis' :\n\t\t\t\teval( \"nuke.menu('\{0\}').findItem('\{1\}').addCommand(\{2\})\".format( _menu.split('.')\[0] , _menu.split('.')\[1] , _arg ) )\n\t\t\telse :\n\t\t\t\teval( \"nuke.toolbar('\{0\}').addCommand(\{1\})\".format( _menu , _arg ) )\n\n\t\tdef menuIcon( _ico , _file ) :\n\t\t\ttry :\n\t\t\t\ticon = _ico\[ nuke.os.path.splitext(_file)\[0] ]\n\t\t\texcept :\n\t\t\t\ticon = ''\n\t\t\treturn icon\n\n\t\tdef excludedCheck( _excludedList , _file ) :\n\t\t\ttemp = True\n\t\t\tfor i in _excludedList :\n\t\t\t\tif nuke.os.path.splitext( _file )\[0].lower().count(i) :\n\t\t\t\t\ttemp = False\n\t\t\treturn temp\n\n\t\tdef scanChar( _string ) :\n\t\t\tgetChar = \{ '(' : \[] , \n\t\t\t\t\t\t')' : \[] , \n\t\t\t\t\t\t',' : \[] , \n\t\t\t\t\t\t'\\'' : \[] , \n\t\t\t\t\t\t'\"' : \[]\n\t\t\t\t\t\t\}\n\t\t\tfor key,value in enumerate( _string ) :\n\t\t\t\tfor char in getChar.keys() :\n\t\t\t\t\tif value == char :\n\t\t\t\t\t\tgetChar\[char].append( key )\n\t\t\treturn getChar\n\n\t\tdef optimizeCMD( _line ) :\n\t\t\tfullCMD = _line.replace(' ','').replace('\\n','').split('.addCommand')\[1]\n\t\t\tcharPos = scanChar( fullCMD )\n\t\t\tdevQ = fullCMD\[1]\n\t\t\toutput = \['','']\n\t\t\ttry :\n\t\t\t\tcmdRNG = \[]\n\t\t\t\tfor i in range( len(charPos\['(']) ) :\n\t\t\t\t\tif i :\n\t\t\t\t\t\tif charPos\['(']\[i] > charPos\[')']\[i-1] :\n\t\t\t\t\t\t\tcmdRNG\[1] = charPos\[')']\[i-1]\n\t\t\t\t\t\telse :\n\t\t\t\t\t\t\tcmdRNG\[1] = charPos\[')']\[i]\n\t\t\t\t\telse :\n\t\t\t\t\t\tcmdRNG = \[ charPos\['(']\[i]+1 , charPos\[')']\[i] ]\n\t\t\t\ttrimmedSTR = fullCMD\[ cmdRNG\[0] : cmdRNG\[1] ]\n\t\t\t\t\n\t\t\t\tmenuName = trimmedSTR\[ : charPos\[devQ]\[1] ]\n\t\t\t\toutput\[0] = menuName.replace(devQ,'').replace('\"','\\'')\n\n\t\t\t\trestCMD = trimmedSTR\[len(menuName)+1:]\n\t\t\t\tif restCMD\[0] == '\"' or restCMD\[0] == '\\'' :\n\t\t\t\t\tdevQ = restCMD\[0]\n\t\t\t\t\toutput\[1] = restCMD.split('\{0\},'.format(devQ))\[0]\[1:-1].replace('\"','\\'')\n\t\t\t\telse :\n\t\t\t\t\toutput\[1] = restCMD.split(',')\[0].replace('\"','\\'')\n\t\t\texcept :\n\t\t\t\tpass\n\t\t\treturn output\n\n\n\t\t### get setting\n\t\tsavedSetting = fileRead( pathSep.join(nkfolder + \['MenuPy','mpySetting']) )\n\n\t\t### scan\n\t\ticoEXT = \[ '.png' , '.jpg' , '.jpeg' , '.gif' ]\n\t\tskipFiles = \[]\n\t\tfor root, dirs, files in nuke.os.walk( _thisPath ) :\n\t\t\tfor file in files :\n\t\t\t\tif nuke.os.path.splitext( file )\[1].lower() in icoEXT :\n\t\t\t\t\tcitems\[ nuke.os.path.splitext( file )\[0]] = '/'.join( nuke.re.split(r'/|\\\\' , root) + \[ file ] )\n\n\t\t\t\tif file == 'menu.py' :\n\t\t\t\t\tif not _mode :\n\t\t\t\t\t\tprintPy2v3('\{0\} --- Loaded its own menu'.format( pathSep.join( nuke.re.split(r'/|\\\\', root) + \[ file ] ) ))\n\t\t\t\telse :\n\t\t\t\t\tif nuke.os.path.splitext( file )\[1].lower() == '.py' and nuke.os.path.splitext( file )\[0].lower() not in FFilter\['exact'] :\n\t\t\t\t\t\tcat = pathSep.join( nuke.re.split(r'/|\\\\', root) + \[file] )\n\t\t\t\t\t\tpyFN\[cat] = \[]\n\t\t\t\t\t\tpyCMD\[cat] = \[]\n\n\t\t\t\t\t\tpyFile = open( cat , 'r')\n\t\t\t\t\t\tpyContext = pyFile.readlines()\n\t\t\t\t\t\tpyFile.close()\n\n\t\t\t\t\t\tfor line in pyContext :\n\t\t\t\t\t\t\tif line\[:6] == 'class ' and cat not in skipFiles :\n\t\t\t\t\t\t\t\tskipFiles.append( cat )\n\t\t\t\t\t\t\tif line\[:4] == 'def ' :\n\t\t\t\t\t\t\t\tpyFN\[cat].append( nuke.re.split(r'def |:', line)\[1].replace('\"', '\\'') )\n\t\t\t\t\t\t\tif line.count('.addCommand(') :\n\t\t\t\t\t\t\t\ttemp = optimizeCMD( line )\n\t\t\t\t\t\t\t\tif len( temp\[1] ) :\n\t\t\t\t\t\t\t\t\tpyCMD\[cat].append( temp )\n\n\t\tfor i in skipFiles :\n\t\t\tdel pyFN\[i]\n\t\t\tdel pyCMD\[i]\n\t\t\tif not _mode :\n\t\t\t\tprintPy2v3('\{0\} --- required its own installation.'.format(i))\n\n\t\t### get .nk and .gizmo\n\t\tfor root, dirs, files in nuke.os.walk( _thisPath ) :\n\t\t\tfor file in files :\n\n\t\t\t\tif nuke.os.path.splitext( file )\[1].lower() == '.nk' :\n\t\t\t\t\tif excludedCheck( FFilter\['excluded'] , file ) :\n\t\t\t\t\t\tsettingVar.append( MenuNodeLines( _thisPath , root , file , '.nk' , citems , savedSetting , _mode ) )\n\t\t\t\t\n\t\t\t\tif nuke.os.path.splitext( file )\[1].lower() == '.gizmo' :\n\t\t\t\t\tif excludedCheck( FFilter\['excluded'] , file ) :\n\t\t\t\t\t\tsettingVar.append( MenuNodeLines( _thisPath , root , file, '.gizmo' , citems , savedSetting , _mode ) )\n\n\n\t\tcmdData = MenuCodeCMD( _thisPath , pyCMD , citems , savedSetting , _mode )\n\n\t\tsettingVar += cmdData.values()\n\n\t\tsettingVar += MenuCodeDEF( _thisPath , pyFN , cmdData.keys() , citems , savedSetting , _mode )\n\n\t\tif not _mode :\n\t\t\tMenuSettingWrite( pathSep.join(nkfolder + \['MenuPy','mpySetting']) , savedSetting , settingVar )" +STARTLINE}
 }
end_group
