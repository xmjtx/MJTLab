#! /Applications/Nuke11.2v4/Nuke11.2v4.app/Contents/MacOS/libnuke-11.2.4.dylib -nx
version 11.2 v4
add_layer {Pworld Pworld.red Pworld.green Pworld.blue Pworld.alpha}
add_layer {Nworld Nworld.red Nworld.green Nworld.blue}
Gizmo {
 onCreate "\nthisGROUP = nuke.thisNode()\nif thisGROUP\['k_TYPE'].getValue() >= 3 :\n  thisGROUP\['k_SELECTCHAN'].setEnabled(True)\n  thisGROUP\['k_POSCHANNEL'].setEnabled(True)\n  if thisGROUP\['k_SELECTCHAN'].getValue() == 2 :\n    thisGROUP\['k_ROTCHANNEL'].setEnabled(True)\n  else :\n    thisGROUP\['k_ROTCHANNEL'].setEnabled(False)\n  thisGROUP\['k_ALPHA'].setEnabled(False)\nelse :\n  thisGROUP\['k_SELECTCHAN'].setEnabled(False)\n  thisGROUP\['k_POSCHANNEL'].setEnabled(False)\n  thisGROUP\['k_ROTCHANNEL'].setEnabled(False)\n  thisGROUP\['k_ALPHA'].setEnabled(True)\n"
 tile_color 0xff6300ff
 addUserKnob {20 User}
 addUserKnob {41 k_TYPE l "What do you want to create?" T n_SELECTTYPE.k_TYPE}
 addUserKnob {26 ""}
 addUserKnob {41 k_SELECTCHAN l "What pass to generate in 3D space" T n_SELECTGEN.k_SELECTCHAN}
 addUserKnob {41 k_POSCHANNEL l "Z/Position Channel" T n_POSCHAN.in}
 addUserKnob {41 k_ROTCHANNEL l "Normal Channel" T n_ROTCHAN.in}
 addUserKnob {26 ""}
 addUserKnob {6 k_ALPHA l "create with alpha input" +STARTLINE}
 k_ALPHA true
 addUserKnob {7 k_SIZEMULT l "Size Multiplication" R 0.001 0.5}
 k_SIZEMULT 0.25
 addUserKnob {7 k_PXSIZE l "Pixel Size" R 0.1 200}
 k_PXSIZE 10
 addUserKnob {7 k_SPACING l Spacing R 0 50}
 addUserKnob {7 k_ASPECT l "Aspect Ratio" R 0.001 2}
 k_ASPECT 1
 addUserKnob {6 k_CCACHE l "Clear Cache After Create" +STARTLINE}
 k_CCACHE true
 addUserKnob {20 g_CHECKSET l "Secret Setting" n 1}
 g_CHECKSET 0
 addUserKnob {3 k_QLIMIT l "Quantity Limit"}
 k_QLIMIT 13000
 addUserKnob {26 k_WARN l "" +STARTLINE T "(recommand not go higher than 15000, ...but you still able to go higher)"}
 addUserKnob {20 endGroup n -1}
 addUserKnob {22 k_MAKEIT l "Let's make it!" T "import random\n\nroot = nuke.root()\n\nthisNODE = nuke.thisNode()\n\nv_TYPE = thisNODE\['k_TYPE'].getValue()\nv_3DCHAN = thisNODE\['k_SELECTCHAN'].getValue()\nv_ALPHA = thisNODE\['k_ALPHA'].getValue()\nv_SIZEMULT = thisNODE\['k_SIZEMULT'].getValue()\nv_PXSIZE = thisNODE\['k_PXSIZE'].getValue()\nv_SPACING = thisNODE\['k_SPACING'].getValue()\nv_ASPECT = thisNODE\['k_ASPECT'].getValue()\nv_CCACHE = thisNODE\['k_CCACHE'].getValue()\nv_QLIMIT = thisNODE\['k_QLIMIT'].getValue()\nPLACEX = thisNODE\['xpos'].getValue()+400\nPLACEY = thisNODE\['ypos'].getValue()\n\nv_IMGSIZE = \[thisNODE.input(0).width(), thisNODE.input(0).height()]\n\nQCHECK = v_IMGSIZE\[0]*v_IMGSIZE\[1]*v_SIZEMULT\n\nif QCHECK  <= v_QLIMIT :\n\n  v_SAMPLESIZE = \[v_IMGSIZE\[0]/(v_IMGSIZE\[0]*v_SIZEMULT), v_IMGSIZE\[1]/(v_IMGSIZE\[1]*v_SIZEMULT)]\n\n  v_ZCHAN = nuke.toNode(thisNODE.name() + '.n_POSCHAN')\n  v_NCHAN = nuke.toNode(thisNODE.name() + '.n_ROTCHAN')\n\n  def batchGEN(WS, HS) :\n    if v_TYPE == 0 :\n      v_GEN = nuke.nodes.Dot(xpos=PLACEX+PX, ypos=PLACEY+PY, tile_color=v_GETCOLOR, hide_input=True)\n    if v_TYPE == 1 :\n      v_GEN = nuke.nodes.NoOp(xpos=PLACEX+PX, ypos=PLACEY+PY, tile_color=v_GETCOLOR, hide_input=True, note_font_size='0')\n    if v_TYPE == 2 :\n      v_GEN = nuke.nodes.BackdropNode(bdwidth=WS, bdheight=HS, xpos=PLACEX+PX, ypos=PLACEY+PY, tile_color=v_GETCOLOR, note_font_size='0', z_order='1000')\n    if v_TYPE >= 3 :\n      with v_3Dpack :\n        v_PXCOLOR = nuke.nodes.Constant()\n        v_PXCOLOR\['color'].setSingleValue(False)\n        v_PXCOLOR\['color'].setValue(\[r, g, b, a])\n\n        if v_3DCHAN == 0 :\n          v_3DPOS = str(PX-(((v_PXSIZE+v_SPACING)*(v_IMGSIZE\[0]*v_SIZEMULT))/2)) + \" \" + str((PY*-1)-(((v_PXSIZE+v_SPACING)*(v_IMGSIZE\[1]*v_SIZEMULT))/2)) + \" \" + str(v_GETZ\[0]*-1)\n        if v_3DCHAN >= 1 :\n          v_3DPOS = str(v_GETZ\[0]) + \" \" + str(v_GETZ\[1]) + \" \" + str(v_GETZ\[2])\n\n        if v_TYPE == 3 :\n          v_GEN = nuke.nodes.Card2(rows='1', columns='1', uniform_scale=v_PXSIZE, translate=v_3DPOS, image_aspect='0')\n        if v_TYPE == 4 :\n          v_GEN = nuke.nodes.Cube(rows='1', columns='1', uniform_scale=v_PXSIZE, translate=v_3DPOS)\n        if v_TYPE == 5 :\n          v_GEN = nuke.nodes.Sphere(uniform_scale=v_PXSIZE, translate=v_3DPOS)\n\n        if v_3DCHAN == 2 :\n          v_GEN\['rotate'].setValue(v_GETN\[0],0)\n          v_GEN\['rotate'].setValue(v_GETN\[1]+90,1)\n          v_GEN\['rotate'].setValue(v_GETN\[2],2)\n\n        v_GEN\['display'].setExpression('global_display')\n        v_GEN\['render_mode'].setExpression('global_render')\n        v_GEN.setInput(0,v_PXCOLOR)\n        v_MERGEO.setInput(COUNT,v_GEN)\n        \n\n\n  with root :\n\n    if v_TYPE >= 3 :\n      import random\n      v_RANAME = str(random.randint(1,1000))\n      with root :\n        v_3Dpack = nuke.nodes.Group(name='PX_3Dpack_' + v_RANAME, xpos=PLACEX, ypos=PLACEY)\n        displayKnob = nuke.Enumeration_Knob('global_display', 'Global Display', \['off','wireframe','solid','solid+wireframe','textured','textured+wireframe'])\n        renderKnob = nuke.Enumeration_Knob('global_render', 'Global render', \['off','wireframe','solid','solid+wireframe','textured','textured+wireframe'])\n        displayNote = nuke.Text_Knob('display_note', '', '<font color=red>*Beware that if display set to texture, it will slow down a lot in 3D view*</font>')\n        divKnob = nuke.Text_Knob('div01','','')\n        v_3Dpack.addKnob(displayKnob)\n        v_3Dpack.addKnob(renderKnob)\n        v_3Dpack.addKnob(displayNote)\n        v_3Dpack\['global_display'].setValue(1)\n        v_3Dpack\['global_render'].setValue(4)\n      with v_3Dpack :\n        v_MERGEO = nuke.nodes.MergeGeo()\n        v_OUTPUT3D = nuke.nodes.Output()\n        v_OUTPUT3D.setInput(0,v_MERGEO)\n\n    COUNT = 0\n\n    for SAMX in xrange (0, int(v_IMGSIZE\[0]*v_SIZEMULT), 1) :\n      PX = (v_PXSIZE+v_SPACING)*SAMX\n\n      for SAMY in xrange (0, int(v_IMGSIZE\[1]*v_SIZEMULT), 1) :\n        PY = ((v_PXSIZE+v_SPACING)*v_ASPECT)*(SAMY*-1)\n\n        v_SPOS = \[v_SAMPLESIZE\[0]/2+(v_SAMPLESIZE\[0]*SAMX), v_SAMPLESIZE\[1]/2+(v_SAMPLESIZE\[1]*SAMY)]\n\n        v_GETSAMPLE = \[thisNODE.input(0).sample('red', v_SPOS\[0], v_SPOS\[1]), thisNODE.input(0).sample('green', v_SPOS\[0], v_SPOS\[1]), thisNODE.input(0).sample('blue', v_SPOS\[0], v_SPOS\[1]), thisNODE.input(0).sample('alpha', v_SPOS\[0], v_SPOS\[1])]\n        r = v_GETSAMPLE\[0]\n        g = v_GETSAMPLE\[1]\n        b = v_GETSAMPLE\[2]\n        a = v_GETSAMPLE\[3]\n        v_GETCOLOR = '0x%02x%02x%02x%02x' % (r*255 , g*255, b*255, 0)\n\n        if v_3DCHAN == 0 :\n          v_GETZ = \[v_ZCHAN.sample('red', v_SPOS\[0], v_SPOS\[1])]\n        if v_3DCHAN >= 1 :\n          v_GETZ = \[v_ZCHAN.sample('red', v_SPOS\[0], v_SPOS\[1]), v_ZCHAN.sample('green', v_SPOS\[0], v_SPOS\[1]), v_ZCHAN.sample('blue', v_SPOS\[0], v_SPOS\[1])]\n          if v_3DCHAN == 2 :\n            v_GETN = \[v_NCHAN.sample('red', v_SPOS\[0], v_SPOS\[1])*90, v_NCHAN.sample('green', v_SPOS\[0], v_SPOS\[1])*90, v_NCHAN.sample('blue', v_SPOS\[0], v_SPOS\[1])*90]\n\n        if v_ALPHA == 1 :\n          if a != 0 :\n            batchGEN(v_PXSIZE,v_PXSIZE*v_ASPECT)\n        else :\n          batchGEN(v_PXSIZE,v_PXSIZE*v_ASPECT)\n\n        COUNT +=1\n\nelse :\n  v_FAILTEXT = str(v_IMGSIZE\[0]) + \"width x \" + str(v_IMGSIZE\[1]) + \"height x \" + str(v_SIZEMULT) + \"size multiply = <font color=red>\" + str(QCHECK)  + \"</font><br> is higher than nuke can handle. It will freeze your machine. Please reduce the input resolution/size muliplication value lower than Quantity Limit <font color=orange>\" + str(int(v_QLIMIT)) + \"</font> and then retry again...\"\n  nuke.message(v_FAILTEXT)\n\nif v_CCACHE == 1 :\n  nukescripts.clearAllCaches" +STARTLINE}
}
 BackdropNode {
  inputs 0
  name BackdropNode1
  tile_color 0xaaaaaa00
  label "Don't Touch"
  note_font_size 42
  xpos 411
  ypos -8
  bdwidth 224
  bdheight 112
 }
 Input {
  inputs 0
  name img
  xpos -1
  ypos -53
 }
 Dot {
  name Dot1
  xpos 33
  ypos 19
 }
set Nce27ba80 [stack 0]
 Output {
  name Output1
  xpos -1
  ypos 135
 }
push $Nce27ba80
 Shuffle {
  in Pworld
  name n_POSCHAN
  label "\[value in]"
  xpos 93
  ypos 76
 }
push $Nce27ba80
 Shuffle {
  in Nworld
  alpha black
  name n_ROTCHAN
  label "\[value in]"
  xpos 210
  ypos 75
 }
 NoOp {
  inputs 0
  name n_SELECTTYPE
  knobChanged "\nthisGROUP = nuke.thisGroup()\nif thisGROUP\['k_TYPE'].getValue() >= 3 :\n  thisGROUP\['k_SELECTCHAN'].setEnabled(True)\n  thisGROUP\['k_POSCHANNEL'].setEnabled(True)\n  if thisGROUP\['k_SELECTCHAN'].getValue() == 2 :\n    thisGROUP\['k_ROTCHANNEL'].setEnabled(True)\n  else :\n    thisGROUP\['k_ROTCHANNEL'].setEnabled(False)\n  thisGROUP\['k_ALPHA'].setEnabled(False)\nelse :\n  thisGROUP\['k_SELECTCHAN'].setEnabled(False)\n  thisGROUP\['k_POSCHANNEL'].setEnabled(False)\n  thisGROUP\['k_ROTCHANNEL'].setEnabled(False)\n  thisGROUP\['k_ALPHA'].setEnabled(True)\n"
  xpos 421
  ypos 72
  addUserKnob {20 User}
  addUserKnob {4 k_TYPE l "What do you want to create?" M {dot noop backdrop card cube sphere}}
 }
 NoOp {
  inputs 0
  name n_SELECTGEN
  knobChanged "\nthisGROUP = nuke.thisGroup()\nif thisGROUP\['k_SELECTCHAN'].getValue() == 2 :\n  thisGROUP\['k_ROTCHANNEL'].setEnabled(True)\nelse :\n  thisGROUP\['k_ROTCHANNEL'].setEnabled(False)\n"
  xpos 545
  ypos 74
  addUserKnob {20 User}
  addUserKnob {4 k_SELECTCHAN l "What pass to generate in 3D space" +DISABLED M {zDepth "Position World" "Position World + Normal World"}}
  k_SELECTCHAN "Position World + Normal World"
 }
end_group
